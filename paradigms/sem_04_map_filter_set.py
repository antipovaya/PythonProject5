# Нормализация данных
# Контекст
# Есть такая операция в статистике - “нормализация”. Это операция принимающая на вход вектор и
# возвращающая другой вектор. Смысл этой операции в том, чтобы данные из разных шкал загнать в
# единый диапазон, как правило - от 0 до 1, тогда с данными становится проще работать.
# ● Ваша задача
# Реализовать с использованием функциональной парадигмы процедуру normalization, которая выполняет
# нормализацию полученного массива по приведенной формуле нормализованного значения элемента, где
# ○ x_norm - нормализованное значение элемента
# ○ x - исходное значение элемента
# ○ x_max, x_min - максимальное и минимальное значение в массиве
# ● Решение.. ?
#
# Пишем код
# ● Ваша задача
# Реализовать с использованием функциональной парадигмы процедуру normalization, которая выполняет
# нормализацию полученного массива по приведенной формуле нормализованного значения элемента, где
# ○ x_norm - нормализованное значение элемента
# ○ x - исходное значение элемента
# ○ x_max, x_min - максимальное и минимальное значение в массиве

def normalize(data):
    min_val = min(data)
    max_val = max(data)

    def normalize_element(x):
        return (x - max_val) / (max_val - min_val)

    return list(map(normalize_element, data))


data = [i for i in range(1,16)]

print(normalize(data))

# Фильтрация данных
# Предположим, что есть какой-то массив содержащий данные о разных людях и их возрасте и вас
# попросили ответить на следующий вопрос: “сколько в массиве людей возраста > 30?”. Для этого, вы
# хотите написать программу для фильтрации наблюдений по возрастному признаку.
# Ваша задача
# Написать скрипт принимающий на вход массив с данными о людях и число - возраст, а возвращающий
# число - количество людей старше указанного возраста.


people = [
    {'name': 'Masha', 'age': 25},
    {'name': 'Sasha', 'age': 35},
    {'name': 'Pasha', 'age': 39},
    {'name': 'Glasha', 'age': 44},
]

def filter_by_age(people:list, min_age:int) -> list:
    return list(filter(lambda pers: min_age <= pers['age'], people))

age = 29
filtered_people = filter_by_age(people, age)
print(filtered_people)


# Поиск дубликатов
#
# Контекст
# Важнейшая задача в анализе данных - поиск дубликатов. Дубликат - это наблюдение, встречающееся в
# данных больше одного раза. Такие наблюдения не просто не улучшают результат анализа или
# полученных моделей, но и замедляют весь процесс в целом, поэтому аналитики и разработчики
# предпочитают избавляться от них перед тем как приступить к анализу.
# Ваша задача
# Реализовать с использованием функциональной парадигмы процедуру для поиска дубликатов. На вход
# подается массив, где могут присутствовать дубликаты (а могут и не присутствовать). При применении к
# массиву, дубликаты должны быть выведены на экран в виде списка.

def find_duplicates(numbers):
    unique_numbers = set()
    return list(filter(lambda x: x in unique_numbers or unique_numbers.add(x), numbers))


numbers = [1, 1, 2, 6, 7, 7, 9, 0]

duplicates = find_duplicates(numbers)
print(duplicates)














